//=============================================================================
// ファイル: model.h
//=============================================================================
// モデルの設定・描画を制御
//=============================================================================

#ifndef __MODEL_H__
#define __MODEL_H__

// ヘッダファイルのインクルード
#include "animator.h"

// フレーム番号の最大値
int max_frame_count = 500;

// Modelクラスの定義（ModelerViewクラスを継承）
class Model : public ModelerView {
private:
    //〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
	//第3週課題
    //---------------------------------------------------------------------

	// フレーム番号
    int frame_count;
    
    //-------------------------------------------------------------------------
    // 制御変数
    //-------------------------------------------------------------------------

        // 〜〜〜変数を追加〜〜〜


    //〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜


public:
    // コンストラクタ（スーパークラスのコンストラクタを呼び出す）
    Model( int x, int y, int w, int h, char* label ) : ModelerView( x, y, w, h, label )
    {
        //〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
		//第3週課題
        //---------------------------------------------------------------------

        // フレーム番号の初期化
        frame_count = 0;
        
        //---------------------------------------------------------------------
        // 初期化
        //---------------------------------------------------------------------

            // 〜〜〜変数を初期化〜〜〜


		//〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
    }

    //〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
	//第3週課題
	//---------------------------------------------------------------------

    // 自動アニメーションの設定
    void SetAutomaticAnimation()
    {
        //-----------------------------------------------------------------
        // アニメーション
        //-----------------------------------------------------------------

            // 〜〜〜プログラムを記述〜〜〜

        //-----------------------------------------------------------------
    }

	// 手動アニメーションの設定
    void SetManualAnimation()
    {
        //-----------------------------------------------------------------
        // アニメーション
        //-----------------------------------------------------------------

            // 〜〜〜プログラムを記述〜〜〜

		//-----------------------------------------------------------------
    }

    //〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜


    // 描画の前処理
    void BeginPaint()
    {
        // 半透明処理を有効化
        glEnable( GL_BLEND );
        // 混合方法の指定
        glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
    }

    // 描画の後処理
    void EndPaint()
    {
        // 半透明処理を無効化
        glDisable( GL_BLEND );
    }


    // オブジェクトの描画
    void draw()
    {
		//〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
		//第3週課題
		//---------------------------------------------------------------------
        // 自動アニメーションの処理
        if ( IsAutomaticAnimation() && frame_count<max_frame_count ) {
            // フレーム番号の更新
            SetSliderValue( FRAME_CONTROLS, ++frame_count );
            // 自動アニメーション
            SetAutomaticAnimation();
        }
        // 手動アニメーションの処理
        else {
            // フレーム番号を取得
            frame_count = (int)GetSliderValue( FRAME_CONTROLS );
            // 手動アニメーション
            SetManualAnimation();            
        }
		//〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜


        // スーパークラスの描画メソッドをコール（必須）
        ModelerView::draw();


        // 描画開始
        BeginPaint();

        //---------------------------------------------------------------------
        // オブジェクトを描画
        //---------------------------------------------------------------------

		 // 〜〜〜プログラムを記述〜〜〜

        //---------------------------------------------------------------------

        // 描画終了
        EndPaint();
    }
};

// __MODEL_H__
#endif
